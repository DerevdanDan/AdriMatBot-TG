import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import random
import os
from datetime import datetime, date
import pytz

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TOKEN')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
TOTAL_DAYS = 100
TOTAL_PUSHUPS = 10000
# --- –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ë–∞—Ä—Å–µ–ª–æ–Ω—ã ---
BARCELONA_TIMEZONE = pytz.timezone('Europe/Madrid')

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_data = {}
user_state = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
# --- –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AWAITING_DAY ---
AWAITING_PUSHUPS_INITIAL = 1
AWAITING_ADD_PUSHUPS = 2

# –°–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è–º
pushup_tips = [
    "–¢–µ—Ö–Ω–∏–∫–∞ –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞! –°–ª–µ–¥–∏—Ç–µ, —á—Ç–æ–±—ã —Å–ø–∏–Ω–∞ –±—ã–ª–∞ –ø—Ä—è–º–æ–π, –∞ –ª–æ–∫—Ç–∏ –Ω–µ —Ä–∞–∑–≤–æ–¥–∏–ª–∏—Å—å –≤ —Å—Ç–æ—Ä–æ–Ω—ã.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–∑–º–∏–Ω–∫—É –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç—Ä–∞–≤–º.",
    "–û—Ç–∂–∏–º–∞–Ω–∏—è –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –∫–æ–ª–µ–Ω, –µ—Å–ª–∏ –æ–±—ã—á–Ω—ã–µ –ø–æ–∫–∞ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å!",
    "–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∂–∏–º–∞—Ç—å—Å—è —Å —É–∑–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ä—É–∫, —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–∫–∞—á–∞–µ—Ç —Ç—Ä–∏—Ü–µ–ø—Å.",
    "–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –¥–µ–ª–∞—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É."
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # --- –ù–û–í–û–ï: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç–∞—Ä—Ç–∞ ---
    # –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –¥–µ–Ω—å.
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user_name, 
            'pushups': 0, 
            'day': 1, 
            'last_pushup_date': date.today().isoformat()
        }
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ DerVas –Ω–∞ 100 –¥–Ω–µ–π –∏ 10000 –æ—Ç–∂–∏–º–∞–Ω–∏–π.\n\n"
        f"–ú—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å 1-–≥–æ –¥–Ω—è. –°–∫–æ–ª—å–∫–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –≤—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏?"
    )
    user_state[user_id] = AWAITING_PUSHUPS_INITIAL

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id in user_state:
        try:
            value = int(text)
            if value >= 0:
                # --- –ò–ó–ú–ï–ù–ï–ù–û: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∂–∏–º–∞–Ω–∏–π ---
                current_state = user_state[user_id]
                
                if current_state == AWAITING_PUSHUPS_INITIAL:
                    user_data[user_id]['pushups'] = value
                    del user_state[user_id]
                    await update.message.reply_text(
                        f"–ü–æ–Ω—è–ª! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –£–¥–∞—á–∏ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ!\n"
                        f"–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /challenge."
                    )
                elif current_state == AWAITING_ADD_PUSHUPS:
                    # --- –ù–û–í–û–ï: –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω—è ---
                    now_barcelona = datetime.now(BARCELONA_TIMEZONE).date()
                    last_date_str = user_data[user_id].get('last_pushup_date')
                    last_date = datetime.fromisoformat(last_date_str).date() if last_date_str else now_barcelona

                    if now_barcelona > last_date:
                        user_data[user_id]['day'] += 1
                        user_data[user_id]['last_pushup_date'] = now_barcelona.isoformat()
                        await update.message.reply_text(f"üöÄ –ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞! –¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞ {user_data[user_id]['day']}-–º –¥–Ω–µ.")

                    user_data[user_id]['pushups'] += value
                    del user_state[user_id]
                    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_data[user_id]['pushups']} –æ—Ç–∂–∏–º–∞–Ω–∏–π.")
                    await show_progress(update, context) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            else:
                await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    else:
        return

async def challenge(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /challenge. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    if user_id not in user_data:
        await update.message.reply_text(
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
        )
        return

    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è", callback_data="add_pushups")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="view_progress")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="view_all_progress")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    
    if query.data == "add_pushups":
        user_state[user_id] = AWAITING_ADD_PUSHUPS
        await query.edit_message_text("–°–∫–æ–ª—å–∫–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –≤—ã —Å–¥–µ–ª–∞–ª–∏? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    elif query.data == "view_progress":
        await show_progress(update, context)
    elif query.data == "view_all_progress":
        await show_all_progress(update, context)

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    if update.callback_query:
        message = update.callback_query.message
    else:
        message = update.message
        
    if user_id not in user_data:
        await message.reply_text("–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    data = user_data[user_id]
    # --- –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å ---
    current_day = data['day']
    current_pushups = data['pushups']
    
    required_pushups_total = current_day * 100
    progress_percentage = (current_pushups / TOTAL_PUSHUPS) * 100
    
    bar_length = 20
    filled_blocks = int(progress_percentage / (100 / bar_length))
    empty_blocks = bar_length - filled_blocks
    progress_bar = f"[{'‚ñà' * filled_blocks}{'‚ñë' * empty_blocks}]"
    
    progress_text = f"–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ {current_day}-–π –¥–µ–Ω—å:\n\n"
    progress_text += f"–í—Å–µ–≥–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π: **{current_pushups}** / **{TOTAL_PUSHUPS}**\n"
    progress_text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: `{progress_bar}` `{progress_percentage:.2f}%`\n\n"

    if current_pushups < required_pushups_total:
        behind_by = required_pushups_total - current_pushups
        daily_catch_up_1_day = (behind_by + 100)
        daily_catch_up_2_days = (behind_by / 2) + 100
        daily_catch_up_3_days = (behind_by / 3) + 100
        
        progress_text += f"‚ö†Ô∏è –í—ã –æ—Ç—Å—Ç–∞–µ—Ç–µ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ **{behind_by}** –æ—Ç–∂–∏–º–∞–Ω–∏–π.\n"
        progress_text += f"–ß—Ç–æ–±—ã –Ω–∞–≥–Ω–∞—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å:\n"
        progress_text += f"- –°–µ–≥–æ–¥–Ω—è: **{daily_catch_up_1_day:.0f}** –æ—Ç–∂–∏–º–∞–Ω–∏–π.\n"
        progress_text += f"- –í —Ç–µ—á–µ–Ω–∏–µ 2 –¥–Ω–µ–π: **{daily_catch_up_2_days:.0f}** –æ—Ç–∂–∏–º–∞–Ω–∏–π –≤ –¥–µ–Ω—å.\n"
        progress_text += f"- –í —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π: **{daily_catch_up_3_days:.0f}** –æ—Ç–∂–∏–º–∞–Ω–∏–π –≤ –¥–µ–Ω—å.\n\n"
        
    progress_text += f"üí° –°–æ–≤–µ—Ç: {random.choice(pushup_tips)}"
    
    if update.callback_query:
         await message.edit_text(progress_text, parse_mode='Markdown')
    elif update.message:
         await message.reply_text(progress_text, parse_mode='Markdown')

async def show_all_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    message = update.callback_query.message

    if not user_data:
        await message.edit_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞—á–∞–ª —á–µ–ª–ª–µ–Ω–¥–∂. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
        return

    sorted_users = sorted(user_data.items(), key=lambda item: item[1]['pushups'], reverse=True)
    
    all_progress_text = "üìä **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n\n"
    
    for _, data in sorted_users:
        user_name = data['name']
        current_pushups = data['pushups']
        # --- –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å ---
        current_day = data['day']
        
        progress_percentage = (current_pushups / TOTAL_PUSHUPS) * 100
        bar_length = 15
        filled_blocks = int(progress_percentage / (100 / bar_length))
        empty_blocks = bar_length - filled_blocks
        progress_bar = f"[{'‚ñà' * filled_blocks}{'‚ñë' * empty_blocks}]"
        
        required_pushups_total = current_day * 100
        status = "‚úÖ –ù–∞–≥–æ–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫" if current_pushups >= required_pushups_total else "üî¥ –û—Ç—Å—Ç–∞–µ—Ç"
        
        all_progress_text += (
            f"**{user_name}**: ({current_pushups} / {TOTAL_PUSHUPS})\n"
            f"`{progress_bar}` `{progress_percentage:.2f}%`\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    
    await message.edit_text(all_progress_text, parse_mode='Markdown')

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("challenge", challenge))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    logger.info("Bot is running...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()